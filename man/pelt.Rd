% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pelt.R, R/pelt.bck.R
\name{pelt}
\alias{pelt}
\title{Detecting Multiple Changepoints using the PELT Algorithm}
\usage{
pelt(data, pen = 2 * log(length(data)), min.dist = 2,
  cost = pelt.norm.meanvar.cost, sum.stat = pelt.norm.sum,
  initial.likelihood.value = 0)

pelt(data, pen = 2 * log(length(data)), min.dist = 2,
  cost = pelt.norm.meanvar.cost, sum.stat = pelt.norm.sum,
  initial.likelihood.value = 0)
}
\arguments{
\item{data}{A vector of length \code{n} containing the data within which you wish to find a changepoint.}

\item{pen}{Numeric value of the linear penalty function.  This value is used in the decision for each individual changepoint so that in total the penalty is k*pen where k is the optimal number of changepoints detected.}

\item{min.dist}{The minimum distance allowed between any two changepoints. Required to have an integer value of at least 1 for changes in mean, or at least 2 for changes in variance.}

\item{cost}{The function used to calculate the cost of a given segment of data. The choice of this function dictates the assumed distribution and the type(s) of changes being detected (or simply the generic cost of data if non-parametric). See Details for possible choices.}

\item{sum.stat}{The function used to generate the summary statistics used by \code{cost}. See Details for possible choices.}

\item{initial.likelihood.value}{The initial value of the likelihood/cost function.}

\item{data}{A vector of length \code{n} containing the data within which you wish to find a changepoint.}

\item{pen}{Numeric value of the linear penalty function.  This value is used in the decision for each individual changepoint so that in total the penalty is k*pen where k is the optimal number of changepoints detected.}

\item{min.dist}{The minimum distance allowed between any two changepoints. Required to have an integer value of at least 1 for changes in mean, or at least 2 for changes in variance.}

\item{cost}{The function used to calculate the cost of a given segment of data. The choice of this function dictates the assumed distribution and the type(s) of changes being detected (or simply the generic cost of data if non-parametric). See Details for possible choices.}

\item{sum.stat}{The function used to generate the summary statistics used by \code{cost}. See Details for possible choices.}

\item{initial.likelihood.value}{The initial value of the likelihood/cost function.}
}
\value{
The vector of changepoint locations detected by PELT.

The vector of changepoint locations detected by PELT.
}
\description{
Calculates the optimal positioning and number of changepoints using PELT.

Calculates the optimal positioning and number of changepoints using PELT.
}
\details{
This method uses the PELT algorithm to obtain the optimal number and location of changepoints within a univariate time series. This is done via the minimisation of a penalised cost function using dynamic programming. Inequality-based pruning is used to reduce computation whilst retaining optimality. A range of different cost functions and penalty values can be used.

This method uses the PELT algorithm to obtain the optimal number and location of changepoints within a univariate time series. This is done via the minimisation of a penalised cost function using dynamic programming. Inequality-based pruning is used to reduce computation whilst retaining optimality. A range of different cost functions and penalty values can be used.
}
\examples{
# Normal observations, multiple change in mean.
data = c( rnorm(100, mean=0, sd=1), rnorm(100, mean=5, sd=1), rnorm(100, mean=-1, sd=1), rnorm(100, mean=2, sd=1) )
# plot.ts(data)
n = length(data)
pelt.results = pelt(data=data, pen=2*log(n), cost=pelt.norm.mean.cost, sum.stat=pelt.norm.sum)
# Normal observations, multiple change in mean.
data = c( rnorm(100, mean=0, sd=1), rnorm(100, mean=5, sd=1), rnorm(100, mean=-1, sd=1), rnorm(100, mean=2, sd=1) )
# plot.ts(data)
n = length(data)
pelt.results = pelt(data=data, pen=2*log(n), cost=pelt.norm.mean.cost, sum.stat=pelt.norm.sum)
}
